using System;
using System.Xml.Linq;
using ThreatLibrary.Parser.Capec;
using Xunit;

namespace ThreatLibrary.Parser.Test.Capec
{
    public class NoteEntityFacts
    {
        [Fact]
        public void should_parse_note()
        {
            XElement element = CapecLoader.LoadAndNormalize("capec_34_note.xml");
            NoteEntity note = NoteEntity.Parse(element);
            
            Assert.Equal(NoteType.Other, note.Type);
            Assert.Equal(
                "White box analysis techniques include file or binary analysis, debugging, disassembly, and decompilation, and generally fall into categories referred to as 'static' and 'dynamic' analysis. Static analysis encompasses methods which analyze the binary, or extract its source code or object code without executing the program. Dynamic analysis involves analyzing the program during execution." + Environment.NewLine +
                "Some forms of file analysis tools allow the executable itself to be analyzed, the most basic of which can analyze features of the binary. More sophisticated forms of static analysis analyze the binary file and extract assembly code, and possibly source code representations, from analyzing the structure of the file itself. Dynamic analysis tools execute the binary file and monitor its in memory footprint, revealing its execution flow, memory usage, register values, and machine instructions. This type of analysis is most effective for analyzing the execution of binary files whose content has been obfuscated or encrypted in its native executable form." + Environment.NewLine +
                "Debuggers allow the program's execution to be monitored, and depending upon the debugger's sophistication may show relevant source code for each step in execution, or may display and allow interactions with memory, variables, or values generated by the program during run-time operations. Disassemblers operate in reverse of assemblers, allowing assembly code to be extracted from a program as it executes machine code instructions. Disassemblers allow low-level interactions with the program as it executes, such as manipulating the program's run time operations. Decompilers can be utilized to analyze a binary file and extract source code from the compiled executable. Collectively, the tools and methods described are those commonly applied to a binary executable file and provide means for reverse engineering the file by revealing the hidden functions of its operation or composition." + Environment.NewLine
                , note.Value);
        }

        [Fact]
        public void should_parse_collection()
        {
            XElement element = XElement.Load("capec_34_note_collection.xml");
            NoteEntity[] notes = NoteEntity.ParseCollection(element);
            
            Assert.Equal(2, notes.Length);
            Assert.Equal(NoteType.Other, notes[0].Type);
            Assert.Equal("Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.", notes[0].Value);
            Assert.Equal(NoteType.Other, notes[1].Type);
            Assert.Equal("This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.", notes[1].Value);
        }
    }
}