<Attack_Pattern xmlns="http://capec.mitre.org/capec-3"
                xmlns:xhtml="http://www.w3.org/1999/xhtml"
                ID="534" Name="Malicious Hardware Update" Abstraction="Standard"
                Status="Stable">
    <Description>An adversary introduces malicious hardware during an update or replacement procedure, allowing for
        additional compromise or site disruption at the victim location. After deployment, it is not uncommon for
        upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and
        replacements are intended to correct defects, provide additional features, and to replace broken or worn-out
        parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted
        component, an adversary can leverage known defects to obtain a desired malicious impact.
    </Description>
    <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
    <Typical_Severity>High</Typical_Severity>
    <Related_Attack_Patterns>
        <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="440"/>
    </Related_Attack_Patterns>
    <Resources_Required>
        <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
    </Resources_Required>
    <Execution_Flow>
        <Attack_Step>
            <Step>1</Step>
            <Phase>Explore</Phase>
            <Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user</Description>
            <Technique>Spidering web sites for all available links</Technique>
            <Technique>Brute force guessing of resource names</Technique>
            <Technique>Brute force guessing of user names / credentials</Technique>
            <Technique>Brute force guessing of function names / actions</Technique>
        </Attack_Step>
        <Attack_Step>
            <Step>2</Step>
            <Phase>Explore</Phase>
            <Description>[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions</Description>
            <Technique>Use the web inventory of all forms and inputs and apply attack data to those inputs.</Technique>
            <Technique>Use a packet sniffer to capture and record network traffic</Technique>
            <Technique>Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.</Technique>
        </Attack_Step>
        <Attack_Step>
            <Step>3</Step>
            <Phase>Experiment</Phase>
            <Description>[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.</Description>
            <Technique>Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)</Technique>
        </Attack_Step>
    </Execution_Flow>
    <Skills_Required>
        <Skill Level="High">Able to develop and manufacture malicious hardware components that perform the same
            functions and processes as their non-malicious counterparts.
        </Skill>
    </Skills_Required>
    <Prerequisites>
        <Prerequisite>The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.</Prerequisite>
        <Prerequisite>The various resources, or individual URLs, must be somehow discoverable by the attacker</Prerequisite>
        <Prerequisite>The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.</Prerequisite>
    </Prerequisites>
    <Example_Instances>
        <Example>An adversary develops a malicious networking card that allows for normal function plus the addition of
            malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating
            that the existing networking card is faulty, and that the victim can order a replacement card free of
            charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious
            networking card replaces the perfectly-functioning original networking card, and the adversary is able to
            take advantage of the additional malicious functionality to further compromise the victim's network.
        </Example>
    </Example_Instances>
    <References>
        <Reference External_Reference_ID="REF-439"/>
    </References>
    <Content_History>
        <Submission>
            <Submission_Name>CAPEC Content Team</Submission_Name>
            <Submission_Organization>The MITRE Corporation</Submission_Organization>
            <Submission_Date>2014-06-23</Submission_Date>
        </Submission>
        <Modification>
            <Modification_Name>CAPEC Content Team</Modification_Name>
            <Modification_Organization>The MITRE Corporation</Modification_Organization>
            <Modification_Date>2015-11-09</Modification_Date>
            <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit
            </Modification_Comment>
        </Modification>
        <Modification>
            <Modification_Name>CAPEC Content Team</Modification_Name>
            <Modification_Organization>The MITRE Corporation</Modification_Organization>
            <Modification_Date>2018-07-31</Modification_Date>
            <Modification_Comment>Updated Description Summary, Examples-Instances</Modification_Comment>
        </Modification>
    </Content_History>
    <Consequences>
        <Consequence>
            <Scope>Confidentiality</Scope>
            <Scope>Access Control</Scope>
            <Scope>Authorization</Scope>
            <Impact>Gain Privileges</Impact>
        </Consequence>
    </Consequences>
    <Mitigations>
        <Mitigation>
            <xhtml:p>In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as "NoAccess", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.</xhtml:p>
            <xhtml:p>Having done so, any direct access to those protected Servlets will be prohibited by the web container.</xhtml:p>
            <xhtml:p>In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.</xhtml:p>
        </Mitigation>
    </Mitigations>
</Attack_Pattern>